package lc_334

class Solution {
    fun increasingTriplet(nums: IntArray): Boolean {

        /**
         * Idea: Use a filter chain:
         * Min1: I have found the first number in the chain
         * Min2: I have found the second number in the chain. Exist a previous number that less than min2
         * If exist a number > min1 and min2 => contains a chain satisfy requirement
         */

        var min1 = Int.MAX_VALUE
        var min2 = Int.MAX_VALUE
        for (n in nums) {
            if (n <= min1) {
                min1 = n
            } else if (n <= min2) min2 = n
            else return true // found a combo with increasing index and min1 <= min2 <= min3
        }
        return false
    }
}

fun main() {
    Solution().increasingTriplet(intArrayOf(20, 100, 10, 12, 5, 13)).let(::println)
    Solution().increasingTriplet(intArrayOf(9, 10, 5, 11, 10, 9, 8)).let(::println)
//    Solution().increasingTriplet(intArrayOf(4, 5, 2147483647, 1, 2)).let(::println)
//    Solution().increasingTriplet(intArrayOf(1, 2, 3, 4)).let(::println)
//    Solution().increasingTriplet(intArrayOf(5, 4, 3, 2, 1)).let(::println)
//    Solution().increasingTriplet(intArrayOf(2, 1, 5, 0, 4, 6)).let(::println)
//    Solution().increasingTriplet(intArrayOf(20, 100, 10, 12, 5, 13)).let(::println)
//    Solution().increasingTriplet(
//        intArrayOf(
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1,
//            1
//        )
//    ).let(::println)
}